name: Build Windows CLI

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  win-build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set VERSION env
        shell: pwsh
        run: |
          "VERSION=$env:GITHUB_REF_NAME" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build deps
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }
          pip install pyinstaller

      - name: Build EXE (PyInstaller)
        shell: pwsh
        run: pyinstaller --onefile --name alak cli/main.py

      - name: Smoke test on Windows runner
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path pkg | Out-Null

          # Prove the EXE launches; capture BOTH stdout and stderr
          & .\dist\alak.exe --help *> "pkg\help.txt" || $true

          # Ensure file is non-empty so upload doesn't fail
          if (!(Test-Path "pkg\help.txt") -or ((Get-Item "pkg\help.txt").Length -eq 0)) {
            "No --help output captured." | Out-File -FilePath "pkg\help.txt" -Encoding ascii
          }

      - name: Prepare artifacts (launcher + README + zip + checksums)
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path pkg | Out-Null
          Copy-Item "dist/alak.exe" "pkg/alak.exe" -Force

          # README
          $readmeLines = @(
            "ALAK Windows CLI $env:VERSION",
            "",
            "Quick start:",
            "1) Unzip the archive.",
            "2) Double-click 'ALAK Launcher.bat' to open a console that shows usage.",
            "   (Or open PowerShell here and run: .\alak.exe --help)",
            "",
            "SmartScreen: If warned, click 'More info' -> 'Run anyway'."
          )
          Set-Content -Path "pkg/README_windows.txt" -Value $readmeLines -Encoding UTF8

          # Double-click launcher (keeps console open)
          $batLines = @(
            "@echo off",
            "setlocal",
            "cd /d %~dp0",
            "title ALAK Toolkit CLI",
            "echo.",
            "echo ALAK Toolkit CLI (%VERSION%)",
            "echo.",
            "alak.exe --help",
            "echo.",
            "pause"
          )
          # NOTE: fixed the quote escaping here:
          $batText = ($batLines -join "`r`n").Replace('%VERSION%', $env:VERSION)
          Set-Content -Path "pkg/ALAK Launcher.bat" -Value $batText -Encoding ASCII

          # Zip it all
          $zipPath = "pkg/alak-win64-$env:VERSION.zip"
          if (Test-Path $zipPath) { Remove-Item $zipPath -Force }
          Compress-Archive -Path @("pkg/alak.exe","pkg/ALAK Launcher.bat","pkg/README_windows.txt") -DestinationPath $zipPath -Force

          # Checksums
          $sha = Get-FileHash -Path $zipPath -Algorithm SHA256
          "$($sha.Hash)  $(Split-Path -Leaf $zipPath)" | Out-File -FilePath "pkg/SHA256SUMS.txt" -Encoding ascii

      - name: Publish release (attach assets)
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          allowUpdates: true
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: |
            pkg/alak-win64-${{ env.VERSION }}.zip
            pkg/SHA256SUMS.txt
            pkg/README_windows.txt
            pkg/help.txt

