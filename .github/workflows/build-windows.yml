name: Build Windows GUI + CLI

on:
  push:
    tags: ['v*']
  workflow_dispatch:

permissions:
  contents: write

jobs:
  win-build:
    runs-on: windows-latest
    env:
      VERSION: ${{ github.ref_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        shell: pwsh
        run: |
          python -m pip install --upgrade pip wheel
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }
          pip install pyinstaller PyQt6 numpy soundfile msgpack zstandard

      # --- CLI exe ---
      - name: Build CLI (onefile, console)
        shell: pwsh
        run: pyinstaller --noconfirm --clean `
              --onefile --console `
              --name alak `
              --paths . `
              --collect-submodules core `
              --collect-submodules formats `
              --collect-submodules cli `
              cli/main.py

      # --- GUI exe (windowed) ---
      - name: Build GUI (onefile, windowed)
        shell: pwsh
        run: pyinstaller --noconfirm --clean `
              --onefile --windowed `
              --name ALAK_GUI `
              --paths . `
              --collect-submodules core `
              --collect-submodules formats `
              --collect-submodules cli `
              --hidden-import core.encoder `
              --hidden-import core.decoder `
              --hidden-import core.dp_auto `
              --hidden-import formats.alak_io `
              --hidden-import cli.compress_alak_file `
              --collect-all PyQt6 `
              --collect-all numpy `
              --collect-all soundfile `
              --collect-binaries soundfile `
              app/alak_qt.py

      # --- GUI console variant (for field debugging) ---
      - name: Build GUI (console debug)
        shell: pwsh
        run: pyinstaller --noconfirm --clean `
              --onefile --console `
              --name ALAK_GUI_console `
              --paths . `
              --collect-submodules core `
              --collect-submodules formats `
              --collect-submodules cli `
              --hidden-import core.encoder `
              --hidden-import core.decoder `
              --hidden-import core.dp_auto `
              --hidden-import formats.alak_io `
              --hidden-import cli.compress_alak_file `
              --collect-all PyQt6 `
              --collect-all numpy `
              --collect-all soundfile `
              --collect-binaries soundfile `
              app/alak_qt.py

      # ---- STAGE FILES WE WILL ZIP ----
      - name: Stage artifacts
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path pkg | Out-Null
          Copy-Item -Path "dist\alak.exe","dist\ALAK_GUI.exe","dist\ALAK_GUI_console.exe" -Destination pkg -Force

          # Helper to open a shell that keeps the window open with the CLI
          "@echo off`r`ncd /d %~dp0`r`nstart cmd /k alak.exe --help" |
            Set-Content -Path "pkg\ALAK CLI (shell).cmd" -Encoding ASCII

          # README
          @(
            "ALAK for Windows $env:VERSION",
            "",
            "Files:",
            "  - ALAK_GUI.exe            (GUI)",
            "  - ALAK_GUI_console.exe    (GUI with console for debugging)",
            "  - alak.exe                (CLI)",
            "  - ALAK CLI (shell).cmd    (double-click: CLI in a shell)",
            "",
            "Note: Builds are unsigned. If SmartScreen appears, click 'More info' -> 'Run anyway'."
          ) | Set-Content -Path "pkg\README_windows.txt" -Encoding UTF8

      - name: Package (zip + checksum)
        shell: pwsh
        run: |
          $zip = "pkg\alak-windows-$env:VERSION.zip"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path @(
            "pkg\alak.exe",
            "pkg\ALAK_GUI.exe",
            "pkg\ALAK_GUI_console.exe",
            "pkg\ALAK CLI (shell).cmd",
            "pkg\README_windows.txt"
          ) -DestinationPath $zip
          (Get-FileHash -Path $zip -Algorithm SHA256).Hash + "  " + (Split-Path -Leaf $zip) |
            Set-Content -Path "pkg\SHA256SUMS.txt" -Encoding ascii

      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          allowUpdates: true
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: |
            pkg/alak-windows-${{ env.VERSION }}.zip
            pkg/SHA256SUMS.txt
            pkg/README_windows.txt
