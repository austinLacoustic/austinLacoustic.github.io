name: Build Windows GUI + CLI

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  win-build:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set VERSION env
        shell: pwsh
        run: echo "VERSION=$env:GITHUB_REF_NAME" >> $env:GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps
        shell: pwsh
        run: |
          python -m pip install --upgrade pip wheel
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }
          # Ensure pack-time deps for Windows GUI:
          pip install pyinstaller
          pip install PyQt6 numpy soundfile msgpack zstandard
          # (sounddevice is optional – GUI handles its absence)

      # --- CLI exe ---
      - name: Build CLI (onefile, console)
        shell: pwsh
        run: pyinstaller --noconfirm --clean `
              --onefile --console `
              --name alak `
              cli/main.py

      # --- GUI exe (windowed) ---
      - name: Build GUI (onefile, windowed)
        shell: pwsh
        run: pyinstaller --noconfirm --clean `
              --onefile --windowed `
              --name ALAK_GUI `
              app/alak_qt.py `
              --collect-all PyQt6 `
              --collect-all numpy `
              --collect-all soundfile `
              --collect-binaries soundfile

      # --- GUI console variant (for field debugging) ---
      - name: Build GUI (console debug)
        shell: pwsh
        run: pyinstaller --noconfirm --clean `
              --onefile --console `
              --name ALAK_GUI_console `
              app/alak_qt.py `
              --collect-all PyQt6 `
              --collect-all numpy `
              --collect-all soundfile `
              --collect-binaries soundfile

      - name: Prepare package
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path pkg | Out-Null
          Copy-Item dist/alak.exe            pkg/alak.exe        -Force
          Copy-Item dist/ALAK_GUI.exe        pkg/ALAK_GUI.exe    -Force
          Copy-Item dist/ALAK_GUI_console.exe pkg/ALAK_GUI_console.exe -Force

          # README
          @(
            "ALAK Windows v$env:VERSION",
            "",
            "Files:",
            "  - ALAK_GUI.exe            ← double-click (normal GUI)",
            "  - ALAK_GUI_console.exe    ← shows errors in a console if GUI won’t launch",
            "  - alak.exe                ← CLI (run from PowerShell / cmd)",
            "",
            "If nothing appears when you double-click ALAK_GUI.exe:",
            "  1) Run ALAK_GUI_console.exe and read any error text.",
            "  2) If ALAK_GUI_error.txt appears, send it with a short note.",
            "",
            "CLI quick test:",
            "  Shift-right-click → Open PowerShell here, then:",
            "      .\\alak.exe --help"
          ) | Set-Content -Path pkg/README_windows.txt -Encoding UTF8

          # Zip + checksums
          $zip = "pkg/alak-windows-$env:VERSION.zip"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path pkg\\* -DestinationPath $zip
          (Get-FileHash -Path $zip -Algorithm SHA256).Hash + "  " + (Split-Path -Leaf $zip) `
            | Set-Content -Path pkg/SHA256SUMS.txt -Encoding ascii

      - name: Publish release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          allowUpdates: true
          replacesArtifacts: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: |
            pkg/alak-windows-${{ env.VERSION }}.zip
            pkg/SHA256SUMS.txt
            pkg/README_windows.txt
